*** SOURCE CODE ***

    The following code is written in NASM:

      global main
      extern printf, scanf
      
      section .data
      
          format1        db "%d %d", 0           ; input format
          format2        db "%u", 10, 0          ; output format
          table          times 100000 dd 1       ; table[j] stores C(i+j,j) for some i
      
      section .bss
      
          n              resd 1
          m              resd 1
      
      section .text
      
      main:
          pushad
      
          ; call scanf to get n & m
          push dword m
          push dword n
          push dword format1
          call scanf
          add esp, 12
      
          ; count C(n,m)
          mov ecx, [m]
          jecxz .case1                           ; if m = 0 then jmp to case1
          mov ecx, [n]
          sub ecx, [m]
          jecxz .case1                           ; if n = m then jmp to case1
          jl .case2                              ; if n < m then jmp to case2
      
         .for1:                                  ; for i := 1 to n-m
              push ecx
              mov esi, table
              mov ecx, [m]
             .for1.1:                            ; for j := 1 to m
                  mov eax, [esi]
                  add esi, 4                     ; C(i+j,j)  = C(i+j-1,j-1) + C(i+j-1,j)
                  add [esi], eax                 ; table[j] := table[j-1]   + table[j]
              loop .for1.1
              pop ecx
          loop .for1
      
          ; call printf to print C(n,m)
         .case1:                                 ; case1: 0 <= m <= n
          mov esi, [m]
          push dword [table + esi * 4]           ;        C(n,m) = table[m]
          jmp .output
         .case2:                                 ; case2: n < m
          push dword 0                           ;        C(n, m) should be 0
         .output:
          push dword format2
          call printf
          add esp, 8
      
          popad
          ret

*** DOCUMENTATION ***

    By the Pascal Formula, we know that
       
      C(n,m) = C(n-1,m-1) + C(n-1,m) for all n >= m >= 1,
    
  so we can use the fallowing Pascal Triangle to compute C(n,m):

                  1*
                1*  1*
              1*  2*  1*
            1*  3*  3*  1
          1*  4*  6*  4   1
        1   5* 10* 10   5   1
      1   6  15* 20  15   6   1

  For example, C(6,2) = 15.
  
    As we could see above, if we want to compute C(6,2), we only need the
  values we marked * above. The computings of the other values are wasted.
  So we can use the fallowing procedure to compute C(6,2):

             table[0] table[1] table[2]
              C(i,0)  C(i+1,1) C(i+2,2)
      i = 0     1        1        1 
      i = 1     1        2        3
      i = 2     1        3        6
      i = 3     1        4       10
      i = 4     1        5       15
  
  To compute each entry of the table, we assign 
  
      table[j] = table[j-1]   + table[j],

  which actually means

      C(i+j,j) = C(i+j-1,j-1) + C(i+j-1,j)

  in every iterations of i and j. If we set i from 0 to n - m, and set j
  from 0 to m, then finally we can get C(n,m) from table[m].

*** BONUS 1 ***

    Here is the source code written in C:

      #include <stdio.h>
      #include <string.h>

      int main(){
          register int i, j;
          unsigned int table[100000];
          int n, m;

          // call scanf to get n & m
          scanf("%d %d", &n, &m);

          // initialization
          for(i = 0; i <= n; ++i)
      	      table[i] = 1;

          // count C(n,m)
          for(i = n - m - 1; i >= 0; --i)
      	      for(j = 1; j <= m; ++j)
      	          table[j] += table[j - 1];

          // call printf to print C(n,m)
          printf("%u\n", table[m]);

          return 0;
      }

    Following is the time used to compute C(35,16) (which is the maximum
  value the program can compute correctly). The program is modified to
  compute 10000000 times:

        Program written in NASM:

          real    0m16.767s
          user    0m16.770s
          sys     0m0.000s

        Program written in C (compiled by GCC):

          real    0m28.940s
          user    0m28.940s
          sys     0m0.000s

        Program written in C (compiled by GCC with -O optimization):

          real    0m9.944s
          user    0m9.940s
          sys     0m0.000s
  
    The program written in assembly language is faster then the one written
  in C when compiled with no optimization; but if we use the optimization
  supported by compiler, then it can run much faster. In such a simple task,
  we cannot found the advantage on speed because the compiler usually has
  a powerful optimization.

    As we can see, the source written in C is much more clear then the one
  written in assembly language, but we can know more details about how
  computer doing these when we use assembly language.

*** BONUS 2 ***

    When the program computes C(40,20), it computes the following values in
  order:

              j = 0   j = 1   j = 2   j = 3   ... j = 20

      i =  0  C(0,0)  C(1,1)  C(2,2)  C(3,3)  ... C(20,20)
      i =  1  C(1,0)  C(2,1)  C(3,2)  C(4,3)  ... C(21,20)
      i =  2  C(2,0)  C(3,1)  C(4,2)  C(5,3)  ... C(22,20)
      i =  3  C(3,0)  C(4,1)  C(5,2)  C(6,3)  ... C(23,20)
        ...                      ...
      i = 40  C(40,0) C(40,1) C(40,2) C(40,3) ... C(40,20)

    When it computes C(35,19), because
    
      C(35,19) = 4059928950, C(35,20) = 3247943160

    so
    
      C(36,20) = C(35,19) + C(35,20) = 7307872110 > 2^32 - 1

    and therefore the Carry Flag is first set.
