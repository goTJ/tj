要瀏覽整個目錄, 我是用遞迴的方式, 每次都處理自己目錄下的檔案

若有子目錄, 就遞迴至下一層, 然後重覆做相同的事

然後再利用i-node來判斷有沒有走到重複的目錄,

每次走進一個目錄時, 我都會先判斷有沒有走過, 將目錄的i-node存起來

當然, 判斷有沒有走過的辦法就是看這i-node有沒有存過

這樣就可以防止無窮迴圈的情形了, 至於存i-node的方式, 我是採用hash table的方式

之前雖然也有考慮過用binary tree來存, 但想說資料量大時, 樹一旦長歪就可怕了

所以想說還是用hash table好, 而且i-node為整數型態, hash做起來很容易


至於輸出方面, 如果symbolic link的名稱包含給定的字串的話, 我也會將這個symbolic link印出來

然後如果需要的話, 會replace這個symbolic link的target file的內容

或者target file是目錄的話, 我也會當作目錄來處理

而格式方面, 我是照助教的, 雖然覺得ctime出來的格式有個換行很醜, 不過感覺格式已經訂好了

於是我就遵照上面的格式處理

另外對於路徑的輸出, 我是藉由讀getcwd來取得絕對路徑, 再append讀名

而路徑長度(包括檔名)最長不得超1024


Replace 方面, 我是用KMP來找做string matching, 至於replace的方式

我分兩種情形, 若被置換的字串若跟置換的字串一樣長, 我就直接將檔案內的那些字串改掉

若不一樣長, 我就先開一個tempfile來存replace後的結果, 然後再重新寫進檔案內


這次的碼用了很多全域變數, 但我覺得是必要的, 如果選擇不用全域變數的話

整份碼很容易會變得unreadable(一堆參數傳來傳去)
	
如果想要兼顧可讀性的話, 我覺得用class來包才是比較好的作法, 不過這作業好像只能用c

所以只能折衷用全域變數了
